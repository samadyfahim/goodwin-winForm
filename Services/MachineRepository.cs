using Microsoft.EntityFrameworkCore;
using goodwin_winForm.Models;

namespace goodwin_winForm.Services
{
    /// <summary>
    /// Repository responsible for machine data access operations using Entity Framework Core.
    /// Provides a clean interface for database operations related to machines and related entities.
    /// </summary>
    public class MachineRepository : IMachineRepository
    {
        private readonly ApplicationDbContext _context;

        /// <summary>
        /// Initializes a new instance of the MachineRepository with the specified database context.
        /// </summary>
        /// <param name="context">The Entity Framework database context for data access.</param>
        public MachineRepository(ApplicationDbContext context)
        {
            _context = context;
        }

        /// <summary>
        /// Retrieves all machines from the database asynchronously with related data.
        /// This method includes maintenance records and active alerts for each machine.
        /// </summary>
        /// <returns>A collection of all machines ordered by name.</returns>
        /// <remarks>
        /// Includes related data:
        /// - Maintenance records for each machine
        /// - Active alerts for each machine
        /// Results are ordered alphabetically by machine name.
        /// </remarks>
        public async Task<IEnumerable<Machine>> GetAllMachinesAsync()
        {
            return await _context.Machines
                .Include(m => m.MaintenanceRecords)
                .Include(m => m.Alerts.Where(a => a.Status == AlertStatus.Active))
                .OrderBy(m => m.Name)
                .ToListAsync();
        }

        /// <summary>
        /// Adds a new machine to the database asynchronously.
        /// This method sets creation and update timestamps automatically.
        /// </summary>
        /// <param name="machine">The machine object to add to the database.</param>
        /// <returns>The added machine with updated ID and timestamps.</returns>
        /// <remarks>
        /// Automatically sets:
        /// - CreatedAt timestamp to current date/time
        /// - UpdatedAt timestamp to current date/time
        /// The machine ID will be generated by the database.
        /// </remarks>
        public async Task<Machine> AddMachineAsync(Machine machine)
        {
            machine.CreatedAt = DateTime.Now;
            machine.UpdatedAt = DateTime.Now;
            
            _context.Machines.Add(machine);
            await _context.SaveChangesAsync();
            return machine;
        }
    }
} 